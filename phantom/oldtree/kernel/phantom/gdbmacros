define show_windows
        set $w = allwindows.next

        while ($w != &allwindows)
            set $win = (drv_video_window_t *)$w
            printf "(drv_video_window_t *)0x%08x, x = %4d, y = %4d, z = %4d, w = %4d, h = %4d, title = %s\n", \
                 $win, $win->x, $win->y, $win->z, $win->xsize, $win->ysize, $win->title ? $win->title : "(NULL)"
            if ($argc > 0)
                output *$win
                printf "\n"
            end
            set $w = $win->chain.next
        end
end

define show_windows_back
        set $w = allwindows.prev

        while ($w != &allwindows)
            set $win = (drv_video_window_t *)$w
            printf "(drv_video_window_t *)0x%08x, x = %4d, y = %4d, z = %4d, w = %4d, h = %4d, title = %s\n", \
                 $win, $win->x, $win->y, $win->z, $win->xsize, $win->ysize, $win->title ? $win->title : "(NULL)"
            if ($argc > 0)
                output *$win
                printf "\n"
            end
            set $w = $win->chain.prev
        end
end


define show_threads
    set $i = 0

    while ($i < 1024)
        set $thread = phantom_kernel_threads[$i]
        if ($thread)
            printf "tid: %d, (phantom_thread_t*)0x%08x, (%.20s), start: 0x%08x\n", \
                $i, $thread, $thread->name, $thread->start_func
        end
        set $i = $i + 1
    end
end

document show_threads
Show a list of threads, their TIDs and names.
end


define _show_trace_entry
    set $entry = $arg0
    printf "%d: CPU %d, thread 0x%08x (%.10s): ", \
        $entry.generation, $entry.cpu, $entry.thread, \
        $entry.thread->name
    output/a $entry.src_pc
    printf " -> "
    output/a $entry.dst_pc
    printf "(0x%08x, 0x%08x, 0x%08x, 0x%08x, ...)\n", \
        $entry.stack[0], $entry.stack[1], $entry.stack[2], $entry.stack[3]
end

define show_trace
    set $sz = sizeof(trace_buf) / sizeof(*trace_buf)
    set $i = trace_buf_wptr
    set $n = $sz
    if ($argc)
        set $n = $arg0
    end
    while ($i >= 0 && $n > 0)
        set $i = $i - 1
        set $n = $n - 1
        set $entry = trace_buf[$i & ($sz - 1)]
        if ($entry.generation == $i)
            _show_trace_entry $entry
        else
            printf "wrong generation, %x vs %x\n", $entry.generation, $i
        end
    end
end

document show_trace
Show a tail of call trace.

show_trace [number-of-lines-to-show]
end

define show_trace_thread
    set $sz = sizeof(trace_buf) / sizeof(*trace_buf)
    set $tid = $arg0
    set $i = trace_buf_wptr
    set $n = $sz
    set $np = $n
    if ($argc > 1)
        set $np = $arg1
    end
    while ($i >= 0 && $n > 0 && $np > 0)
        set $i = $i - 1
        set $n = $n - 1
        set $entry = trace_buf[$i & ($sz - 1)]
        if ($entry.thread == $tid)
            set $np = $np - 1
            if ($entry.generation == $i)
                _show_trace_entry $entry
            else
                printf "wrong generation, %x vs %x\n", $entry.generation, $i
            end
        end
    end
end

document show_trace_thread
Show a tail of call trace for the specified thread.

show_trace_thread thread-ptr [number-of-lines-to-show]
end
