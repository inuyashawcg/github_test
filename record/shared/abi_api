abi_api 之间的区别，参考:
  https://cloud.tencent.com/developer/article/1996556

ABI 简介
C++ 可执行文件是由编译器将源代码编译成目标文件后链接生成的，那么如果目标文件由不同的编译器编译生成，能否相互链接呢？
例如，能够将 MSVC 编译出来的目标文件和GCC编译出来的目标文件链接到一起，生成一个可执行文件吗？

对于上面这个问题，如果链接器可以将 MSVC 编译出来的目标文件和 GCC 编译出来的目标文件链接到一起，那么链接器首先需要支持
MSVC 编译生成的目标文件的格式 PE/COFF 和 GCC 的 ELF 格式。此外，不同格式的目标文件需要拥有相同的符号修饰标准、变量内存分布方式、
函数调用方式等等。其中目标文件格式、符号修饰标准、变量内存分布方式、函数调用方式等这些跟二进制可执行代码兼容性相关的内容称为 ABI

ABI（Application Binary Interface）为应用程序二进制接口，描述了应用程序和操作系统之间，一个应用和它的库之间，
或者应用的组成部分之间的二进制层面的底层接口。影响 ABI 的因素非常多，硬件、编程语言、编译器、链接器、操作系统等
都会影响 ABI。我们以 C 语言为例，来看编程语言是如何影响 ABI 的。对于 C 语言的目标代码来说，以下几个方面会决定
目标文件之间是否二进制兼容：
 （1）内置数据类型（如 char、int、float 等）的大小和在存储器中的存放方式（大端、小端、对齐方式等）；
 （2）组合数据类型（struct、union 等）的存储方式和内存分布；
 （3）外部符号和用户定义的符号之间的命名方式和解析方式。比如函数名func在C语言目标文件中是否会被解析成外部符号_func；
 （4）函数调用方式，比如参数入栈顺序、返回值如何保存等；
 （5）函数栈的分布方式，比如参数和局部变量在堆栈里的位置，参数传递方法等；
 （6）寄存器使用约定，函数调用时哪些寄存器可以修改，哪些需要保存等。

以上只是部分因素会影响到ABI，其它的不再一一列举。到了 C++，语言层面对 ABI 的影响又增加了许多额外的内容，可见，这些内容使得
C++ 做到二进制兼容比C更加困难。增加的内容有：
 （1）继承体系下的对象内存布局，比如基类、虚基类在继承类中的位置；
 （2）指向类成员函数的指针（Pointer to Member）的内存分，如何通过指向成员函数的指针调用成员函数，如何传递this指针；
 （3）如何调用虚函数，虚函数表的内容和分布形式，虚函数表指针在对象中的位置等；
 （4）template如何实例化；
 （5）外部符号的修饰；
 （6）全局对象的构造和析构；
 （7）异常的产生和捕获机制；
 （8）标准库的细节问题、RTTI如何实现等；
 （9）内联函数访问细节。

C++ 新增的内容包括但限于以上内容，对 ABI 的兼容带了极大的挑战，C++ 二进制兼容性不够友好也一直为人诟病。不仅不同编译器编译的二进制代码之间
无法相互兼容，有时候连同一个编译器的不同版本之间的兼容性也不好。比如开发团队 A 开发了一个使用 CompilerA 版本的编译器编译的库 libA.a，
开发团队 B 开发了一个使用 CompilerB 版本编译器编译的库 libB.a，开发团队 C 想将库 libA.a 和库 libB.a 链接到程序 Program C中，
可能会出现不兼容的情况。

事实上 C++ ABI 尚未统一，目前兼容情况仍不乐观，主要有两套体系，一是微软 Visual C++ 使用的标准，另一个是GNU GCC 使用的标准，二者互不兼容。

2.API 简介
API（Application Programming Interface）是应用程序编程接口，是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，
而又无需了解源码和内部实现细节。比如，POSIX 标准，C99 标准等都是对 API 的规定。其中，POSIX 标准是不同操作系统间的 API 标准，POSIX 标准定义了类 Unix 
操作系统应该为应用程序提供的接口。C99 标准则规定了 C 语言所需提供的库函数。

API 是一种源代码级别的接口，同一个 API，在不同平台（不同操作系统或硬件平台）的具体实现方式可能不同，但是接口的形式和功能必须一致，这样就能够保证使用统一的接口
实现跨平台开发。如果 API 不兼容，那么开发出来的程序换一个环境将无法运行，即出现不兼容的情况。比如 POSIX 规定 printf() 原型必须统一，不同平台间的功能也需要是
相同的，即向标准输出格式化输出用户指定的内容，这样就能保证应用程序在使用 printf() 后，在不同平台可以正确运行。

3.ABI 与 API 的区别
通过上面的介绍，可以知道 ABI 和 API 是两种完全不同的东西。二者的区别可总结概括为如下几点：

 - 描述的内容不同。ABI 规定了二进制文件的格式、内容、装载/卸载程序的要求、函数调用时的参数传递规则、寄存器、堆栈的使用；API 规定操作系统、硬件平台、服务组件、
    语言函数库等需要提供的功能函数接口；
 
 - 作用的层面不同。ABI 描述二进制层面的接口，API 描述代码级层面的接口；
 
 - 兼容的难度不同。ABI 的兼容程度比API更为严格，即 ABI 实现兼容更加困难


///////////////// 一些个人感想 /////////////////
  API 和 ABI 的区别也可以从日常使用场景上进行感知:
    - 当我们写 C/C++ "源代码" 的时候，不同的模块的开发人员一般比较关注的就是其他模块提供的接口是什么样的，这个就可以认为是 api，
      也就是在源代码层级

    - 当源文件编译生成目标文件，最终要链接成可执行文件的时候，我们就要关注 abi 的兼容性，否则很可能会导致链接器无法找到对应符号的问题。
      "注意，此时已经到了 目标文件/可执行文件 这一层级，也就是二进制文件层级"

    - 可以看出，api 不兼容的时候，我们只需要修改源代码接口；但如果 abi 不兼容，可能就得修改编译器、链接器等等这些，那改动量将是非常大的。
      由此也可以看出，abi 兼容要比 api 兼容麻烦很多