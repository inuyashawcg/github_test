/**
    1、参与小组成员代码审核，了解项目的其他成员都在做什么，遇到哪些问题
    2、代码提交把修改的地方描述清楚，保留评论或者修改的记录
    3、第一次就做好正确的事情，这是最好的偷懒的方法。不要全部都是临时方案，确定可行性之后就要把整体框架搭建出来
    4、专业、全面的知识调研
    5、保证优秀的软件架构，高可维护性
    6、没有返工，没有加班
    7、经验不足一定要多向别人请教，模仿并学习别人好的代码架构设计
    8、能够灵活配置的东西一定不要写死
    9、与组员讨论问题不要微信，直接当面讨论
    10、注重培养分析问题、解决问题的能力
    11、扩展知识面
    12、要做好自我规划，包括一些短期目标和长期目标，并要一直坚持
    13、平时做事情，一定不能用战术上的勤奋弥补战略上的懒惰。做事情之前，或者写代码的过程中，一定要想，我为了解决这一个
        具体的问题，能不能用一种通用的解决方法来实现，这样既可以解决当前的问题，也可以解决未来的问题，实现一劳永逸
    14、遇到问题不要抱怨和恐惧，唯一要做的事情就是思考解决问题的方法
    15、写代码不是最重要的工作，最重要的工作是通过调研找到最合适的算法
    16、做技术的人要专注于提高认知和技能，经济上的回报会自然而然的到来
    17、在熟练掌握自己负责模块的前提下，才能去尝试其他方向的工作
    18、遍历是很多学霸共有的特性。查阅完关于某个问题的所有资料后，你就会成为该领域的一个专家，当然还要动手实践
    19、系统最优原则
    20、组合创新思想
    21、在头文件中添加关于类设计的注释，一般要说明这个类是干嘛用的。类成员命名尽量让读者能一眼看出它代表的是什么；
        类函数不需要添加特别的注释，但是要在实现的关键部分写出设计思路和实现方法
    22、好的程序员应该对自己所写程序中的每一个字节都了如指掌
**/


/**
  当遇到一个不熟悉的 bug 的时候如何去解决：
    0、如果原有系统运行没什么问题，那么被修改过的代码是具有最大嫌疑的。与原有系统不同的地方，无论是很早时间的修改，或是当前
       正在进行的修改，都要好好去看是否存在逻辑上的错误
    1、阅读关联源代码，大概了解整体的处理逻辑 (写出来)
    2、在重要的地方多加打印信息
    3、思考造成这个问题的所有可能性，并一条条写出来 (重要，一定要写出来)
    4、测试所有的可能性，并记录所有的测试结果
    5、如果还没有解决，返回步骤3思考新的可能性

**/