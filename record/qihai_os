// *** 表示比较重要的结构体，？号表示需要进一步探讨

//////////// 删减部分 ////////////
uio相关
	用户空间和内核空间交互
sysctl相关
	涉及用户空间



//////////// kernel object ////////////
- /usr/src/sys/sys/kobj.h

	struct kobj ***
		这个应该很多模块会用到，暂时还是要保留

	struct kobj_class ***
		这个主要对应 driver，可能要作为一个独立的class

	struct kobj_ops
		在 kobj 和 kobj_class 中都包括，作用就是一个方法表

	struct kobjop_desc
		对于方法的一个描述，感觉是可以跟 kobj_method 做一个合并

	struct kobj_method ?
		表示方法函数，device_method_t = kobj_method_t

	很多结构体都是跟方法相关，方法的描述或者是方法表，如果以后设计成类的话，应该都是可以合并到一起的
	kobj 和 kobj_class 这两个可能要独立保留，后续再填充一些内容(比如方法表相关的东西)

- /usr/src/sys/kern/subr_kobj.c
	上述结构体相关的功能函数，可以从函数名称和参数类型分析属于哪个类比较合适



//////////// device & bus ////////////
- /usr/src/sys/sys/bus.h

	struct u_device
		向用户空间发送的 device 信息，新的操作系统当中已经统一为内核空间，所以这个是否保留需要讨论

	struct devreq_buffer ？
		ioctl & /dev/devctl12 相关

	struct devreq ？
		用于定义ioctl

	struct devclass ***？
		用于统一管理 device 和 driver，但是其作用也就是这些了，感觉应该是不需要managed

	struct driver ***
		其实就是 kobj_class

	struct resource_map
		资源映射，可以作为 resource 类的一个内部类

	struct resource_map_request
		资源映射请求，可以作为 resource 类的一个内部类

	struct resource ***
		有些驱动需要为其子设备保留一个简单的资源列表，resource 主要可以用于这个
		bus 和 device 都应该包含一个资源类

	struct resource_list_entry
		resource 列表中的一个元素，不同的资源块拥有不同的属性
		可以作为 resource 的内部类，然后用容器进行管理

	struct resource_spec
		对 resource 进行描述


- /usr/src/sys/sys/rman.h

	struct rman	***
		对 resource list 进行操作，有独立的属性的和功能函数，可以作为独立的类
		device 和 bus 中应该是要包含这个类，用于对资源的处理

	struct resource_i
		resource 管理资源的链表结构，rman 管理 resource 要借助 resource_i 结构体


- /usr/src/sys/sys/sysctl.h

	struct sysctl_req
		请求对某块地址空间通过 sysctl 进行操作。通过判断地址空间是内核空间还是用户空间，决定调用接口的类型；
		这里就涉及到了用户空间相关的东西，后续应该是要删减的

	struct sysctl_oid
		sysctl 好像是有一个全局的tree来进行管理(MIB tree)，tree的话应该是需要managed

	sysctl_ctx_entry
		用于在上下文列表中跟踪所有动态创建的sysctl


- /usr/src/sys/sys/module.h
	
	struct moduledata
		sysinit注册

	struct mod_depend
		module依赖的系统版本信息

	struct mod_version
		module的版本

	struct mod_pnp_match_info

	struct module ***
		跟 linker_file 联系非常密切(.ko)


- /usr/src/sys/kern/subr_busdma_bufalloc.c
- /usr/src/sys/kern/subr_bus_dma.c
- /usr/src/sys/sys/busdma_bufalloc.h
- /usr/src/sys/sys/bus_dma.h
- /usr/src/sys/sys/bus_dma_internal.h
	
	struct busdma_bufzone
	struct busdma_bufalloc
	struct bus_dma_segment
		dma空间分配相关


- /usr/src/sys/sys/uio.h

	struct uio
		内核与用户空间数据交互，后边应该是要删减


- /usr/src/sys/sys/conf.h

	struct cdev
		用于创建字符设备

	struct cdevsw 
		字符设备开关表，感觉是可以跟上边的进行合并

......


//////////// linker & loader ////////////
- /usr/src/sys/sys/linker.h

	struct linker_file
		定义了链接文件的基本属性，相当于是一个基类

	struct linker_class
		kobj_class

	struct elf_file
		在 link_elf_obj.c 和 link_elf.c 两个文件中都有相关的定义，执行的操作有些区别(动态链接和静态链接)

	struct modlist
		应该是对应于 .ko 文件