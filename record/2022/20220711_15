////////////// 20220711 //////////////
  如果要建立 vnode 与 TptFile 的直接映射，需要考虑 vnode 回收与类的释放顺序。因为 inactive() 函数应该是在文件删除
操作之后才被调用的，那此时文件类的实例化对象应该是已经没了。由于想要将 inode 与 vnode 完全隔离起来，所以两者之间不能再
出现指针成员相互指向，否则就失去了更改的意义

  因为之前调试的时候发现 rm -rf 是递归删除的，所以路径下的每个文件都应该会分配一个 vnode。那感觉可以手动控制一下这个流程，
我们可以在删除文件类之前，将 inode 指针赋值给 vnode->v_data。这样，即使文件类被删除，我们仍然可以得到该文件对应的 inode，
后续无需修改 inactive() 代码逻辑就可以实现 vnode 的回收，可以尝试一下这种方法


////////////// 20220712 //////////////
  尝试修改了 vnode / TptFile / inode 三者的指针指向关系，发现还是有互相矛盾的地方。就比如我们 inactive() 这一步操作，
原有代码逻辑是只对 inode() 进行操作，传入的参数只有 vnode。假如我们要通过 TptFile 类去找 inode，那我们就要明确的知道此时
v_data 中存放的指针是否还是指向一个可用的类实例。但是以现在的实现逻辑，这个是无法保证的，文件类实例很可能在调用该函数之前已经
被删除

  所以，第一个要修改的地方就是 TptFile 真正被释放的时机，remove / rmdir 这些操作应该只是将这些对象的指针从链表或者表中移除，
而不是将它们从内存中释放。那什么时候应该释放？ 个人理解应该采用 inode 类似设计，当引用计数 <= 0 的时候释放。所以，可以考虑将
delete 操作从 hashtable->remove() 转移到 inactive() 函数当中；
  第二点需要修改的地方应该是将 inodeopts 包含到 TptFile 类当中。感觉 inode 与 TptFile 不应该再是两个平行的数据结构，而应该
是包含关系

  rm -rf *** 是递归删除一个目录下的所有的文件。什么意思？ 其实就是说文件系统每次只删除一个文件，当一个目录下的所有文件都被删除
之后，在利用 rmdir 把空目录删除 (需要验证)。所以，在文件系统 remove() 函数的逻辑中，我们不需要在删除一个目录文件时，递归删除
文件类中的子文件链表包含的所有元素，就删除当前元素即可


////////////// 20220713 //////////////
  新版本与旧版本实现上的区别主要是 vnode 回收与删除的操作跟之前是不太一样的。仍然是参考原有磁盘文件系统的设计，以文件链接计数
作为是否删除文件类实例的判断条件。普通文件与目录文件的初始链接计数是不一样的，但是 rmdir 会将目录的链接计数置零。所以，判断条件
可以统一起来

  只要文件执行了删除操作，其对应的 vnode 就应该被回收，而不用判断 filemode 是否为 0

  当前 vnode 与 inode 已经完全脱离关系，所以文件系统原有的一些接口需要修改。本来可以只传入一个 vnode 指针 (因为两者之间是可以
互相转换的)，但是现在必须将两个指针同时传入，然后分别处理。以后应该最大限度将这种接口改掉，函数看起来比价臃肿


////////////// 20220714 //////////////
  vfs 在 FreeBSD 中提供的是一组全局方法表，算是一个层级。个人理解不需要将所有的方法都集中都一个类当中，这样会导致这个类非常大。
可以采用类似 tptfs 方法表的这种设计。到底需不需要用一个类将这些方法表统一管理起来，需要进一步讨论

  vfs 内部存在一个 workitem queue，其作用主要是区别对待不同类型数据的延迟时间。对于文件数据的更新，vfs 设置的优先级是最低的，
所以很有可能延迟数十秒的时间，这样就能为一些快速文件的创建节省磁盘数据通道带宽。对于文件系统元数据的更新，优先级要更高一些，所以
vfs 给其设定的延迟时间大概是文件数据延迟的一半；目录数据更新是最高优先级，设定的延迟时间仅仅是文件数据延迟的三分之一


////////////// 20220715 //////////////
  从构建根文件系统的角度来看，奇海中可能还是要保留目录项结构的存在。此时是先有文件的 inode，然后反向创建文件类。感觉可以适当简化
原有设计，就比如说 htree 就可以省略，因为它是为提高文件查找速度而设计的。所以，目录项可以仅用作存储功能，不再承担查找功能 (vnode
与 inode 不再直接关联)。这样的话也有利于文件系统崩溃时能够对其进行重新构建