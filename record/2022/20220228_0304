////////////// 20220207 //////////////
  《FreeBSD设计与实现》中有着这么一段描述：“对于和磁盘有关的数据块来说，虚拟内存系统没有办法描述它们。系统留了一小块缓冲区
来存放这些磁盘块，它们包含着文件系统的元数据，比如超级块，位映射表和 inode 节点”。从中我们可以看到，磁盘文件系统其实是将元数据
当做是一个整体来处理的，同步时使用的应该都是 buffer object 中的读写锁

  tptfs 中可以参考这种设计，因为当我们需要为新文件分配一个 inode 时，可能还没有实例化一个文件类，此时也就不存在文件锁，也就无法
利用文件锁对 inode table 或者 bitmap 进行数据同步管理，这就需要利用文件系统的读写锁来实现。所以，在 tptfs 中加锁的时候，我们
首先要判断 bread/bwrite 的操作对象是谁。如果是文件本身的数据，那么我们就用文件锁；如果处理的是文件系统的数据，即元数据，那么我们
就使用文件系统的读写锁来处理

  块组结构在 ext2fs 中是在超级块结构内，利用 ext_mount->ump_mtx 来进行同步。tptfs 中其实有两种选择，第一种是仍然采用 ext2 的
机制，利用 tptfs_mount 中的互斥锁管理；第二种方式是利用文件系统锁来管理。可能这个结构在管理程度上要严格一些，所以 ext2 直接用的
互斥锁，tptfs 暂时先沿用这一设计，后续根据实际使用情况再进行调整