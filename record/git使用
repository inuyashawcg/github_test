//////////////////////////// 基本认识 ////////////////////////////
git 是分成工作区、暂存区和版本库三个部分，reset 命令它是用来重置暂存区的，而不是工作区的。restore 用于重置暂存区：
  - git add 之后会把工作区的修改更新到暂存区，如果此时突然发现这些修改没必要添加到暂存区，使用 reset
  - 当发现文件本身并不需要修改时，使用 restore 命令，将工作区也进行重置，这样文件就重新回到了修改之前的状态


.gitignore
  我们可以在.gitignore文件中添加条目忽略某个目录或者文件。假如我们就添加一个 dir，所有包含这一名字的目录都会被忽略。
  为了防止这种事情的发生，我们最好还是添加完整路径

//////////////////////////// 使用场景 ////////////////////////////
场景1： 加入代码开发到某个阶段，发现方向有错误，然后想退回到某个提交之前重新开发

首先要将现有的一些没有提交的修改进行保存，不一定非要提交，这样做是为了保证当前代码分支是干净的。可以先执行
  git stash
就是将没有提交的代码暂时保存起来。然后我们就可以执行
  git reset --hard ***
将代码回退到某个分支。这里要注意的是，当我们执行了 git push 之后，我们所有的工作都已经同步到了远程分支当中。
所以我们无论如何操作当前代码分支，甚至是直接删除了所有代码，只要远程分支没有发生变化，我们还是可以直接 git pull
下来最新修改的代码。
回退之后就可以基于当前版本创建新的分支，完成之后就可以切回原来的代码分支恢复现场，这样就可以在新的代码分支中在某个
提交之后继续新的开发


////////////////////////////
场景2：当前项目有多个分支同时开发，但是都为合并到主分支。分支A要用到分支B中的某几个文件进行功能测试，其他文件不需要变动

这种场景就是我们只需要从当前分支合并另外一个分支中的某几个文件即可，执行步骤(当前是在A分支)：
  git checkout B file1 file2 ...
这样就会把B分支中的几个文件合并到A分支。但是如果A分支中已经包括这几个文件的话，就有可能会产生冲突。此时可以先新建一个A分支
的暂存分支 A_TEMP，先将B分支与 A_TEMP 进行合并，然后再将 A_TEMP 合并到 A 分支。具体操作参考：
  https://www.cnblogs.com/coderxx/p/11544550.html


////////////////////////////
场景3：当一个项目中有多个分支需要合并，但是出现了一些棘手的合并冲突，这个时候要如何处理？
首先要取消此次合并，尝试逐个解决。工作重点应该放到信息收集上，以便了解目标分支当前所发生的一些事情

git log a..b
  表示来自于分支b，但是不属于分支a的提交，这样就可以将两个分支所做的事情独立来看

git merge-base a b
  获取分支a和分支b的共同祖先，可以大致认为是两个分支开始分叉的那次提交。得到这次提交的散列值之后，就可以利用 git diff
  命令比较两个分支相对于此次提交的不同之处，然后再考虑如何进行手动合并